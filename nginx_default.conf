# 配置用户 推荐使用安装时默认即可
user nginx;
# 工作进程数(建议跟CPU的核数量一致) 推荐使用auto即可
worker_processes auto;
# 设置自动绑定cpu，目的是将进程分配到指定cpu
worker_cpu_affinity auto;
# 设置可由工作进程打开的同时连接的最大数量(不能超过系统设置的最大值)
worker_rlimit_nofile 65535;
# 进程文件 默认即可
pid /run/nginx.pid;
# 包含其他的配置
include /etc/nginx/modules-enabled/*.conf;

events {
    # 工作模式(多路IO复用方式)
    use epoll;
    # 每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为worker_processes * worker_connections
    worker_connections 1024;
    # 是否同时接受多个新的网络连接请求
    multi_accept on;
    # 设置网路连接序列化，是否防止惊群现象发生
    accept_mutex on;
}

# HTTP服务器相关配置
http {
    # 日志格式
    # log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    # 访问日志 默认即可 access_log off;表示关闭访问日志
    access_log /var/log/nginx/access.log main;
    # 错误日志 默认即可 彻底关闭的配置error_log /dev/null;常见的错误日志级别有debug|info|notice|warn|error|crit|alert|emerg，级别越高记录的信息越少
    error_log /var/log/nginx/error.log crit;
    # 是否启用文件快速传输 开启高效文件传输模式 用sendfile传输文件时有利于改善性能
    sendfile on;
    # 是否缓存数据后集中发送，适用于大文件传输
    tcp_nopush on;
    # 是否立即发送数据包，使用于即时性传输 禁用Nagle来解决交互性问题
    tcp_nodelay on;
    # 是否隐藏nginx版本号 默认即可
    # server_tokens off;
    # 客户端保持连接时间 可以禁用用来提高并发
    keepalive_timeout 30;
    # types_hash_max_size影响散列表的冲突率。types_hash_max_size越大，就会消耗更多的内存，但散列key的冲突率会降低，检索速度就更快
    types_hash_max_size 2048;
    # 包含MIME类型的配置
    include /etc/nginx/mime.types;
    # 默认使用二进制流格式
    default_type application/octet-stream;
    # 开启gzip压缩
    gzip on;
    # 一下gzip配置一般默认即可
    # 不压缩临界值，大于1K的才压缩 
    # gzip_min_length 1k;
    # 指定申请缓存空间的个数和每个空间的大小
    # gzip_buffers 16 8k;
    # 设置压缩的最低HTTP版本，默认是1.1
    # gzip_http_version 1.0; 
    # 压缩级别，1-10，数字越大压缩的越好，时间也越长，根据实际情况调整；默认是 1
    # gzip_comp_level 2; 
    # 指定压缩的 MIME 类型
    # gzip_types text/plain application/x-javascript text/css application/xml image/gif image/png;
    # 表示不对IE6进行Gzip压缩，因为IE6支持的不友好
    # gzip_disable "MSIE [1-6]\."; 
    # 包含其他配置文件 默认即可
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
    
    # 一般情况下下面的配置都会按项目放在单独的配置文件中
    # 定义一个简单负载均衡 指定权重方式
    upstream test {
        # weight表示权重，max_fails允许失败的次数 超过次数认为宕机，fail_timeout设置超时时间，当超时60秒时认为失败
        server 127.0.0.1:8000 weight=1 max_fails=3 fail_timeout=60;
        server 127.0.0.1:8001 weight=1 max_fails=3 fail_timeout=60 down; # down表示该server不参与负载均衡
    }
    # 定义一个简单负载均衡 ip_hash方式
    upstream mycom {
        ip_hash;
        server 127.0.0.1:8002;
        server 127.0.0.1:8003;
    }

    server {
        # 指定监听端口
        listen 80;
        # 指定监听地址或域名 默认为_
        server_name _;
        # 指定根目录
        root /usr/share/nginx/html;
        # 指定请求体的大小
        client_max_body_size 20M;

        # 包含项目的Nginx配置文件
        include /etc/nginx/default.d/*.conf;

        location ~*^.+$ { # 请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
            # root path;  # 根目录
            # index vv.txt;  # 设置默认页
            proxy_pass  http://127.0.0.1:8000;  # 请求转发给本地8000端口处理
            # proxy_pass http://test; # 使用http代理 将所有请求转发给负载均衡test处理
            # deny 127.0.0.1;  # 拒绝的ip
            # allow 172.18.5.54; # 允许的ip
            # 地址重定向 break本条规则匹配完成后终止，不在匹配任何规则，redirect返回302临时重定向，permanent返回301永久重定向
            # rewrite ^/api/(.*) /$1 break;
            # 下面这段在反向代理时 用来设定被代理服务器接收到的header信息 一般情况下，这也是反向代理的标配
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Protocol $scheme;
        }
        # index的指定用法
        location / {
            root /var/www/mycom; # 此时/var/www/mycom目录下如果有一个index.html 那么访问配置域名时会默认进入该文件
        }
        # 使用uwsgi代理的推荐配置
        location api/ {
            include uwsgi_params; # 使用uwsgi代理
            uwsgi_pass mycom; # 将所有请求转发给负载均衡mycom处理
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Protocol $scheme;
        }
        # 指定静态文件地址
        location /static/ {
            alias /var/www/mycom/static/; # 使用alias指定路径 需要到实际静态文件所在的目录的当前目录名，并且 / 必须前后一致
            # root /var/www/mycom; # 使用root指定路径 需要到实际静态文件所在的目录的上一级目录，并且路由名需和实际目录名一致
        }
        # 404时的页面重定向
        error_page 404 /404.html;
        location = /40x.html {
        }
        # 发生错误时的页面重定向
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }
    }
}